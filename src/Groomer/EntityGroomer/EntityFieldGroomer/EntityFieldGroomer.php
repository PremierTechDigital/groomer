<?php

namespace Drupal\groomer\Groomer\EntityGroomer\EntityFieldGroomer;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\groomer\Groomer\EntityGroomer\EntityGroomerInterface;
use Drupal\groomer\Groomer\Groomer;
use Drupal\groomer\Service\GroomerManager;

/**
 * EntityFieldGroomer for a given field.
 *
 * This object is used to return clean field data.
 *
 * @property \Drupal\groomer\Service\GroomerManager $groomerManager
 *
 * @package Drupal\groomer\Groomer\EntityGroomer\EntityFieldGroomer
 */
class EntityFieldGroomer extends Groomer implements EntityFieldGroomerInterface {

  /**
   * Field Data definition.
   *
   * Contains all of the field's data for the given entity.
   *
   * @var \Drupal\Core\Field\FieldItemListInterface
   */
  protected $fieldData;

  /**
   * Field Name.
   *
   * Contains the name of the field being groomed.
   *
   * @var string
   */
  protected $fieldName;

  /**
   * The value(s) of the field.
   *
   * @var mixed
   */
  protected $fieldValues;

  /**
   * Contains the type of field in string format.
   *
   * @var string
   */
  protected $fieldType;

  /**
   * Contains the field definition declaration.
   *
   * @var \Drupal\Core\Field\FieldDefinitionInterface
   */
  protected $fieldDefinition;

  /**
   * Contains the Drupal storage of the field.
   *
   * @var \Drupal\Core\Field\FieldStorageDefinitionInterface
   */
  protected $fieldStorage;

  /**
   * Contains the field cardinality.
   *
   * @var int
   */
  protected $cardinality;

  /**
   * EntityGroomer that called this groomer.
   *
   * @var \Drupal\groomer\Groomer\EntityGroomer\EntityGroomerInterface
   */
  protected $entityGroomer;

  /**
   * EntityFieldGroomer constructor.
   *
   * @param \Drupal\Core\Field\FieldItemListInterface $fieldData
   *   The field data of the field being groomed.
   * @param \Drupal\groomer\Service\GroomerManager $groomerManager
   *   Groomer Manager service containing Drupal services.
   * @param string $type
   *   The type of groomer defined by a string key.
   * @param string $signature
   *   The signature of the groomer generated by the factory.
   */
  public function __construct(FieldItemListInterface $fieldData, GroomerManager $groomerManager, string $type, string $signature) {
    parent::__construct($fieldData, $groomerManager, $type, $signature);

    $this->fieldData = $fieldData;
    $this->fieldName = $fieldData->getName();
    $this->fieldValues = $fieldData->getValue();
    $this->fieldDefinition = $fieldData->getFieldDefinition();
    $this->fieldType = $this->fieldDefinition->getType();
    $this->fieldStorage = $this->fieldDefinition->getFieldStorageDefinition();
    $this->cardinality = $this->fieldStorage->getCardinality();
  }

  /**
   * Get the field type for this groomer.
   *
   * @return string
   *   Return the field type of the field for this groomer.
   */
  public function getFieldType() : string {
    return $this->fieldType;
  }

  /**
   * Get the field data for this groomer.
   *
   * @return \Drupal\Core\Field\FieldItemListInterface
   *   Raw field data returned.
   */
  public function getFieldData() : FieldItemListInterface {
    return $this->fieldData;
  }

  /**
   * {@inheritdoc}
   */
  public function getEntityGroomer() : ?EntityGroomerInterface {
    return $this->entityGroomer;
  }

  /**
   * {@inheritdoc}
   */
  public function setEntityGroomer(EntityGroomerInterface $groomer) : void {
    $this->entityGroomer = $groomer;
  }

  /**
   * {@inheritdoc}
   */
  public function depth(): int {
    $depth = 0;
    $parent = $this->getEntityGroomer();

    while ($parent !== NULL) {
      $depth++;
      $parent = $parent->getParentEntityGroomer();
    }

    return $depth;
  }

  /**
   * {@inheritdoc}
   */
  protected function getGroomedData() {

    // Check if this is a single-value field.
    if ($this->cardinality === 1) {
      return $this->process($this->fieldValues[0], 0);
    }

    // Array that will hold the field data.
    $data = [];

    // Process all field values.
    foreach ($this->fieldValues as $i => $value) {
      $data[] = $this->process($value, $i);
    }

    return $data;
  }

  /**
   * Formats the data of the field in a clean format.
   *
   * @param array $value
   *   Array of values for the field attached to this groomer.
   * @param int $i
   *   The index of the field value.
   *
   * @return mixed
   *   Data of the field for this groomer in a clean format.
   */
  public function process(array $value, int $i) {
    // Send error for unhandled FieldGroomerType.
    if (!isset($value['value']) || !array_key_exists('value', $value)) {
      // Logs an error for an unhandled EntityFieldGroomer type.
      \Drupal::logger('groomer')->warning(
        t(
          "Error: Unhandled EntityFieldGroomer type: <strong>@type</strong>. A field is not being groomed correctly. Check with backend team to fix this by adding a new EntityFieldGroomer class that will handle this field type.",
          [
            '@type' => $this->fieldType,
          ]
        )
      );
      return NULL;
    }

    return $value['value'];
  }

}
